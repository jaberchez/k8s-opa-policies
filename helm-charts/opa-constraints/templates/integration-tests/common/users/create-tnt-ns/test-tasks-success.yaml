---
apiVersion: v1
kind: Pod
metadata:
  name: test-pod-tenant-tasks-ok
  namespace: {{ .Values.integrationTests.namespace }}
  labels:
    purpose: test-pod-tenant-tasks-ok
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-80"
spec:
  serviceAccountName: create-tnt-ns
  automountServiceAccountToken: true
  restartPolicy: Never
  containers:
  - name: test-opa
    image: ubuntu-kubectl
    imagePullPolicy: Never
    command: ["/bin/bash", "-c"]
    args:
      - |
        name="tnt-test"
        namespaceDst={{ .Values.integrationTests.namespace }}
        k8sfile="/tmp/test.yaml"

        trap "test -e ${k8sfile} && rm -f ${k8sfile}" EXIT

        echo -n "Creating namespace $name ... "
        cat <<END > $k8sfile
        apiVersion: v1
        kind: Namespace
        metadata:
          name: $name
        END

        msg=$(kubectl apply -f $k8sfile --dry-run=server 2>&1)
        [[ $? != 0 ]] && { echo "ERROR"; echo "$msg"; exit 1; }
        echo "OK"

        name="secret-dockercfg"

        echo -n "Creating $name Secret into default namespace ... "

        cat <<END > $k8sfile
        apiVersion: v1
        kind: Secret
        metadata:
          name: $name
          namespace: $namespaceDst
        type: kubernetes.io/dockercfg
        data:
          .dockercfg: e30= # Empty object {}
        END

        msg=$(kubectl apply -f $k8sfile --dry-run=server 2>&1)
        [[ $? != 0 ]] && { echo "ERROR"; echo "$msg"; exit 1; }
        echo "OK"

        name="default-deny-all"

        echo -n "Creating $name NetworkPolicy into default namespace ... "

        cat <<END > $k8sfile
        apiVersion: networking.k8s.io/v1
        kind: NetworkPolicy
        metadata:
          name: $name
          namespace: $namespaceDst
        spec:
          podSelector: {}
          policyTypes:
          - Ingress
          - Egress
        END

        msg=$(kubectl apply -f $k8sfile --dry-run=server 2>&1)
        [[ $? != 0 ]] && { echo "ERROR"; echo "$msg"; exit 1; }
        echo "OK"

        exit 0
